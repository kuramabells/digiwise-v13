'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';

// Use direct environment variables
const config = {
  username: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  dialect: 'mysql',
  dialectModule: require('mysql2'),
  logging: process.env.NODE_ENV === 'development' ? console.log : false,
  define: {
    underscored: true,
    freezeTableName: true,
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
};

const db = {};

// Log the database config (without password)
console.log('Database config:', {
  ...config,
  password: config.password ? '***' : undefined
});

let sequelize;
sequelize = new Sequelize(
  config.database,
  config.username,
  config.password,
  config
);

// Import all model files
fs.readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

// Set up associations
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;
EOL
Rename the problematic config directory to prevent it from being loaded:
bash
# On your server
mv /var/www/backend/config /var/www/backend/config_backup
mkdir -p /var/www/backend/config
Create a minimal 
package.json
 in the models directory to ensure proper module resolution:
bash
# On your server
cat > /var/www/backend/models/package.json << 'EOL'
{
  "name": "models",
  "version": "1.0.0",
  "private": true
}